@{
    ViewData["Title"] = "Feedback Home Page";
}

 <table width="100%">
        <tr>
            <td></td>
            <td>
                <h1 style="font-weight:500;">Provide your feedback</h1>
                <h2 style="font-weight:300;">We're eager to know about what you think!</h2>
            </td>
        </tr>
</table>

 <table width="100%">
        <tr>
            <td>
                <input id="key" type="hidden" size="40" value="@(ViewBag.SpeechKey)" />
                <input id="languageOptions" type="hidden" value="en-US" />
                <input id="formatOptions" type="hidden" value="Simple" />
                <button id="startBtn" disabled="disabled">Start</button>
                <button id="stopBtn" disabled="disabled">Stop</button>
                Status: <span id="statusDiv"></span>
            </td>
        </tr>
</table>

<form method="POST">
 <table width="100%">
        <tr>
            <td><textarea id="hypothesisDiv" name="feedback" placeholder="Type or speak your feedback." style="width:500px;height:50px"></textarea></td>
        </tr>
        <tr>
            <td><input id="email" name="email" placeholder="your.email@provider.com" type="text" size="40"></td>
        </tr>
        <tr>
            <td><input type="submit" /></td>
        </tr> 
    </table>
</form>

<!-- The SDK has a dependency on requirejs (http://requirejs.org/). -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.3/require.min.js"></script>

 <!-- SDK REFERENCE -->
<script src="js/speech.browser.sdk-min.js"></script>

<!-- SDK USAGE -->
<script>
    // On doument load resolve the SDK dependecy
    function Initialize(onComplete) {
        require(["Speech.Browser.Sdk"], function(SDK) {
            onComplete(SDK);
        });
    }
    
    // Setup the recongizer
    function RecognizerSetup(SDK, recognitionMode, language, format, subscriptionKey) {
        var recognizerConfig = new SDK.RecognizerConfig(
            new SDK.SpeechConfig(
                new SDK.Context(
                    new SDK.OS(navigator.userAgent, "Browser", null),
                    new SDK.Device("SpeechSample", "SpeechSample", "1.0.00000"))),
            recognitionMode, // SDK.RecognitionMode.Interactive  (Options - Interactive/Conversation/Dictation>)
            language, // Supported laguages are specific to each recognition mode. Refer to docs.
            format); // SDK.SpeechResultFormat.Simple (Options - Simple/Detailed)
        // Alternatively use SDK.CognitiveTokenAuthentication(fetchCallback, fetchOnExpiryCallback) for token auth
        var authentication = new SDK.CognitiveSubscriptionKeyAuthentication(subscriptionKey);
        return SDK.CreateRecognizer(recognizerConfig, authentication);
    }
    // Start the recognition
    function RecognizerStart(SDK, recognizer) {
        recognizer.Recognize((event) => {
            /*
                Alternative syntax for typescript devs.
                if (event instanceof SDK.RecognitionTriggeredEvent)
            */
            switch (event.Name) {
                case "RecognitionTriggeredEvent" :
                    UpdateStatus("Initializing");
                    break;
                case "ListeningStartedEvent" :
                    UpdateStatus("Listening");
                    break;
                case "RecognitionStartedEvent" :
                    UpdateStatus("Listening_Recognizing");
                    break;
                case "SpeechStartDetectedEvent" :
                    UpdateStatus("Listening_DetectedSpeech_Recognizing");
                    console.log(JSON.stringify(event.Result)); // check console for other information in result
                    break;
                case "SpeechHypothesisEvent" :
                    UpdateRecognizedHypothesis(event.Result.Text);
                    console.log(JSON.stringify(event.Result)); // check console for other information in result
                    break;
                case "SpeechEndDetectedEvent" :
                    OnSpeechEndDetected();
                    UpdateStatus("Processing_Adding_Final_Touches");
                    console.log(JSON.stringify(event.Result)); // check console for other information in result
                    break;
                case "SpeechSimplePhraseEvent" :
                    break;
                case "SpeechDetailedPhraseEvent" :
                    break;
                case "RecognitionEndedEvent" :
                    OnComplete();
                    UpdateStatus("Idle");
                    console.log(JSON.stringify(event)); // Debug information
                    break;
            }
        })
        .On(() => {
            // The request succeeded. Nothing to do here.
        },
        (error) => {
            console.error(error);
        });
    }
    // Stop the Recognition.
    function RecognizerStop(SDK, recognizer) {
        // recognizer.AudioSource.Detach(audioNodeId) can be also used here. (audioNodeId is part of ListeningStartedEvent)
        recognizer.AudioSource.TurnOff();
    }
</script>

<!-- Browser Hooks -->
<script>
    var startBtn, stopBtn, hypothesisDiv, phraseDiv, statusDiv, key, languageOptions, formatOptions;
    var SDK;
    var recognizer;
    var previousSubscriptionKey;
    document.addEventListener("DOMContentLoaded", function () {
        createBtn = document.getElementById("createBtn");
        startBtn = document.getElementById("startBtn");
        stopBtn = document.getElementById("stopBtn");
        hypothesisDiv = document.getElementById("hypothesisDiv");
        statusDiv = document.getElementById("statusDiv");
        key = document.getElementById("key");
        languageOptions = document.getElementById("languageOptions");
        formatOptions = document.getElementById("formatOptions");
        languageOptions.addEventListener("change", function () {
            Setup();
        });
        
        formatOptions.addEventListener("change", function () {
            Setup();
        });
        startBtn.addEventListener("click", function () {
            if (!recognizer || previousSubscriptionKey != key.value) {
                previousSubscriptionKey = key.value;
                Setup();
            }
            hypothesisDiv.innerHTML = "";
            RecognizerStart(SDK, recognizer);
            startBtn.disabled = true;
            stopBtn.disabled = false;
        });
        stopBtn.addEventListener("click", function () {
            RecognizerStop(SDK, recognizer);
            startBtn.disabled = false;
            stopBtn.disabled = true;
        });
        Initialize(function (speechSdk) {
            SDK = speechSdk;
            startBtn.disabled = false;
        });
    });
    function Setup() {
        recognizer = RecognizerSetup(SDK, SDK.RecognitionMode.Interactive, languageOptions.value, SDK.SpeechResultFormat[formatOptions.value], key.value);
    }
    function UpdateStatus(status) {
        statusDiv.innerHTML = status;
    }
    function UpdateRecognizedHypothesis(text) {
        hypothesisDiv.innerHTML = text;
    }
    function OnSpeechEndDetected() {
        stopBtn.disabled = true;
    }
    function OnComplete() {
        startBtn.disabled = false;
        stopBtn.disabled = true;
    }
</script>